f1 = fun x -> fun y -> x + y end end;
f2 = fun x -> fun y -> x - y end end;
f3 = fun x -> fun y -> x * y end end;
f4 = fun x -> fun y -> x and y end end;
f5 = fun c -> fun d -> fun x -> (c*x) + d end end end;
pow = fun n -> fun x ->
    if n = 0 then 
        1
    else
        x * ((pow (n - 1)) x)
    end
end end;

fib = fun n -> fib2 0 1 n end;

fib2 = fun a -> fun b -> fun n ->
    if n = 0 then
        a
    else
        fib2 b (a + b) (n - 1)
    end
end end end;

g1 = fun x -> (f1 (x + 1)) x end;
g2 = fun x -> let partial = f2 (x + 1) in partial x end end;
g3 = fun x -> let partial = f3 (x + 1) in partial x end end;
g4 = fun x -> let partial = f4 (x + 1) in partial x end end;
g5 = fun x -> let pc = f5 1 in let pcd = pc 0 in pcd x end end end;
g6 = fun x -> let pc = f5 2 in let pcd = pc 5 in pcd x end end end;
g7 = fun x -> pow 2 x end;
g8 = fun x -> pow 3 x end;
