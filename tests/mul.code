f1:
XXX: check type?
movq %rdi, %rax
ret
f2:
XXX: check type?
movq %rdi, %rax
ret
f3:
XXX: check type?
movq $0, %rax
ret
f4:
XXX: check type?
movq $0, %rax
ret
f5:
testq $1, %rdi
jnz raisesig
leaq (, %rdi, 2), %rax
ret
f6:
testq $1, %rdi
jnz raisesig
leaq (, %rdi, 2), %rax
ret
f7:
testq $1, %rdi
jnz raisesig
leaq (%rdi, %rdi, 2), %rax
ret
f8:
testq $1, %rdi
jnz raisesig
leaq (%rdi, %rdi, 2), %rax
ret
f9:
testq $1, %rdi
jnz raisesig
leaq (, %rdi, 4), %rax
ret
f10:
testq $1, %rdi
jnz raisesig
leaq (, %rdi, 4), %rax
ret
f11:
testq $1, %rdi
jnz raisesig
leaq (%rdi, %rdi, 4), %rax
ret
f12:
testq $1, %rdi
jnz raisesig
leaq (%rdi, %rdi, 4), %rax
ret
f13:
testq $1, %rdi
jnz raisesig
leaq (, %rdi, 8), %rax
ret
f14:
testq $1, %rdi
jnz raisesig
leaq (, %rdi, 8), %rax
ret
f15:
testq $1, %rdi
jnz raisesig
leaq (%rdi, %rdi, 8), %rax
ret
f16:
testq $1, %rdi
jnz raisesig
leaq (%rdi, %rdi, 8), %rax
ret
f17:
movq %rdi, %rax
sarq $1, %rax
movq %rdi, %rsi
sarq $1, %rsi
testq $1, %rdi
jnz raisesig
movq %rdi, %rdx
sarq $1, %rdx
imulq %rdi, %rdx
sarq $1, %rdx
imulq %rdx, %rsi
imulq %rsi, %rax
salq %rax, %rax
ret
f18:
testq $1, %rdi
jnz raisesig
movq %rdi, %rax
sarq $1, %rax
imulq %rdi, %rax
sarq $1, %rax
movq %rdi, %rsi
sarq $1, %rsi
imulq %rsi, %rax
movq %rdi, %rsi
sarq $1, %rsi
imulq %rsi, %rax
salq %rax, %rax
ret
f19:
testq $1, %rdi
jnz raisesig
movq %rdi, %rdx
sarq $1, %rdx
imulq %rdi, %rdx
movq $0, %rax
ret
f20:
testq $1, %rdi
jnz raisesig
TROOOOOOOOOOOOUUUUUUUUUUUBLLLLLLE with constant folding (make_equal_to)
ret
f21:
testq $1, %rdi
jnz raisesig
movq %rdi, %rax
imulq $24, %rax
ret
f22:
testq $1, %rdi
jnz raisesig
leaq (%rdi, %rdi, 4), %rax
leaq (, %rax, 4), %rax
leaq (%rax, %rax, 2), %rax
leaq (, %rax, 2), %rax
ret
