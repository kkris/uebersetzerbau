%{
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include "tree.h"
#include "codegen.h"

%}

%start ret
%term OP_VAR=1 OP_NUM=2 OP_ADD=3 OP_SUB=4 OP_MUL=5 OP_AND=6 OP_LT=7 OP_EQ=8 OP_NOT=9 OP_HEAD=10 OP_TAIL=11 OP_ISNUM=12 OP_ISLIST=13 OP_ISFUN=14 OP_RET=15 OP_ZERO=16 OP_ONE=17 OP_LIST=18 OP_FUN=19 OP_IF=20 OP_IF_THEN=21 OP_IF_THEN_ELSE=22
%%

ret: OP_RET(u_expr)             # 1 # ret(LEFT_CHILD(bnode), UNTAGGED, TYPE_REG);
ret: OP_RET(const)              # 0 # ret(LEFT_CHILD(bnode), UNTAGGED, TYPE_NUMBER);
ret: OP_RET(var)                # 0 # ret(LEFT_CHILD(bnode),TAGGED, TYPE_REG);
ret: OP_RET(t_expr)             # 1 # ret(LEFT_CHILD(bnode), TAGGED, 0);
ret: OP_RET(u_list)             # 1 # ret(LEFT_CHILD(bnode), UNTAGGED, TYPE_LIST);
ret: OP_RET(t_word)             # 0 # ret(LEFT_CHILD(bnode), TAGGED, TYPE_WORD);

fun: OP_FUN                     # 0 #

u_expr: const                   # 1 # bnode->constant = 1;
u_expr: t_expr                  # 9 # expect_num(bnode); untag_num_inplace(bnode->reg);

u_expr: OP_MUL(u_expr, u_expr)  # 1 # gen_mul(bnode);

u_expr: OP_MUL(u_expr, var)     # 1 # expect_num(RIGHT_CHILD(bnode)); gen_mul(bnode);
u_expr: OP_MUL(var, u_expr)     # 1 # expect_num(LEFT_CHILD(bnode)); gen_mul(bnode);
u_expr: OP_MUL(var, var)        # 1 # expect_num(LEFT_CHILD(bnode)); expect_num(RIGHT_CHILD(bnode)); gen_mul(bnode);

u_expr: OP_MUL(u_expr, one)     # 0 # make_equal_to(bnode, LEFT_CHILD(bnode));
u_expr: OP_MUL(one, u_expr)     # 0 # make_equal_to(bnode, RIGHT_CHILD(bnode));

u_expr: OP_ISNUM(var)           # 0 # gen_isnum(bnode);
u_expr: OP_ISNUM(t_word)        # 0 # gen_isnum(bnode);

t_expr: const                   # 8 # bnode->constant = 1;
t_expr: var                     # 8 # expect_num(bnode);
t_expr: u_expr                  # 9 # tag_num_inplace(bnode->reg);
t_expr: t_word                  # 9 # expect_num(bnode);

t_expr: u_list                  # 9 # raise_signal();
t_expr: fun                     # 9 # raise_signal();

t_expr: OP_ADD(t_expr, t_expr)  # 1 # gen_add(bnode);
t_expr: OP_ADD(zero, t_expr)    # 0 # make_equal_to(bnode, RIGHT_CHILD(bnode));
t_expr: OP_ADD(t_expr, zero)    # 0 # make_equal_to(bnode, LEFT_CHILD(bnode));

t_expr: OP_SUB(t_expr, t_expr)  # 1 # gen_sub(bnode);
t_expr: OP_SUB(zero, t_expr)    # 2 # gen_sub(bnode);
t_expr: OP_SUB(t_expr, zero)    # 0 # make_equal_to(bnode, LEFT_CHILD(bnode));

t_expr: OP_NOT(t_expr)          # 1 # gen_not(bnode);
t_expr: neg_t_expr              # 5 # gen_not(bnode);
t_expr: OP_NOT(neg_t_expr)      # 0 # make_equal_to(bnode, LEFT_CHILD(LEFT_CHILD(bnode)));

t_expr: OP_AND(t_expr, t_expr)  # 1 # gen_and(bnode);

t_expr: OP_LT(t_expr, t_expr)   # 1 # gen_lt(bnode);

t_expr: OP_EQ(t_expr, t_expr)   # 9 # gen_eq(bnode); /* type checked */
t_expr: OP_EQ(t_word, t_word)   # 1 # gen_eq(bnode); /* not type checked */

t_expr: OP_ISLIST(var)          # 0 # if(LEFT_CHILD(bnode)->symbol->type == SYMBOL_TYPE_FUN) { move_const(0, bnode->reg); } else { gen_islist(bnode); }
t_expr: OP_ISLIST(t_word)       # 0 # gen_islist(bnode);

t_expr: OP_ISFUN(var)           # 0 # gen_isfun(bnode);
t_expr: OP_ISFUN(t_word)        # 0 # gen_isfun(bnode);


neg_t_expr: OP_NOT(t_expr)      # 0 # expect_num(LEFT_CHILD(bnode));

var: OP_VAR                     # 0 #
var: OP_MUL(var, one)           # 0 # expect_num(LEFT_CHILD(bnode)); make_equal_to(bnode, LEFT_CHILD(bnode));
var: OP_MUL(one, var)           # 0 # expect_num(RIGHT_CHILD(bnode)); make_equal_to(bnode, RIGHT_CHILD(bnode));
var: OP_ADD(var, zero)          # 0 # expect_num(LEFT_CHILD(bnode)); make_equal_to(bnode, LEFT_CHILD(bnode));
var: OP_ADD(zero, var)          # 0 # expect_num(RIGHT_CHILD(bnode)); make_equal_to(bnode, RIGHT_CHILD(bnode));
var: OP_SUB(var, zero)          # 0 # expect_num(LEFT_CHILD(bnode)); make_equal_to(bnode, LEFT_CHILD(bnode));

const: one                      # 0 # bnode->constant = 1;
const: zero                     # 0 # bnode->constant = 1;
const: OP_NUM                   # 0 # bnode->constant = 1;
const: OP_ADD(const, const)     # 0 # make_constant(bnode, LEFT_CHILD(bnode)->value + RIGHT_CHILD(bnode)->value);
const: OP_SUB(const, const)     # 0 # make_constant(bnode, LEFT_CHILD(bnode)->value - RIGHT_CHILD(bnode)->value);
const: OP_MUL(const, const)     # 0 # make_constant(bnode, LEFT_CHILD(bnode)->value * RIGHT_CHILD(bnode)->value);
const: OP_AND(const, const)     # 0 # make_constant(bnode, LEFT_CHILD(bnode)->value & RIGHT_CHILD(bnode)->value);
const: OP_LT(const, const)      # 0 # make_constant(bnode, LEFT_CHILD(bnode)->value < RIGHT_CHILD(bnode)->value ? 1 : 0);
const: OP_EQ(const, const)      # 0 # make_constant(bnode, LEFT_CHILD(bnode)->value == RIGHT_CHILD(bnode)->value ? 1 : 0);
const: OP_NOT(const)            # 0 # make_constant(bnode, LEFT_CHILD(bnode)->value ^ 1);
const: OP_ISNUM(const)          # 0 # make_constant(bnode, 1);


one: OP_ONE                     # 0 # make_constant(bnode, 1);

one: OP_ADD(one, zero)          # 0 # make_constant(bnode, 1);
one: OP_ADD(zero, one)          # 0 # make_constant(bnode, 1);

one: OP_SUB(one, zero)          # 0 # make_constant(bnode, 1);

one: OP_MUL(one, one)           # 0 # make_constant(bnode, 1);

one: OP_ISNUM(t_expr)           # 0 # make_constant(bnode, 1);
one: OP_ISNUM(u_expr)           # 0 # make_constant(bnode, 1);

one: OP_ISLIST(u_list)          # 0 # make_constant(bnode, 1);

one: OP_ISFUN(fun)              # 0 # make_constant(bnode, 1);


zero: OP_ZERO                   # 0 # make_constant(bnode, 0);

zero: OP_MUL(u_expr, zero)      # 0 # make_constant(bnode, 0);
zero: OP_MUL(zero, u_expr)      # 0 # make_constant(bnode, 0);
zero: OP_MUL(t_expr, zero)      # 0 # make_constant(bnode, 0);
zero: OP_MUL(zero, t_expr)      # 0 # make_constant(bnode, 0);
zero: OP_MUL(const, zero)       # 0 # make_constant(bnode, 0);
zero: OP_MUL(zero, const)       # 0 # make_constant(bnode, 0);
zero: OP_MUL(t_expr, zero)      # 0 # make_constant(bnode, 0);
zero: OP_MUL(zero, t_expr)      # 0 # make_constant(bnode, 0);
zero: OP_MUL(var, zero)         # 0 # expect_num(LEFT_CHILD(bnode)); make_constant(bnode, 0);
zero: OP_MUL(zero, var)         # 0 # expect_num(RIGHT_CHILD(bnode)); make_constant(bnode, 0);

zero: OP_ADD(zero, zero)        # 0 # make_constant(bnode, 0);

zero: OP_AND(zero, var)         # 0 # expect_num(RIGHT_CHILD(bnode)); make_constant(bnode, 0);
zero: OP_AND(var, zero)         # 0 # expect_num(LEFT_CHILD(bnode)); make_constant(bnode, 0);

zero: OP_ISLIST(fun)            # 0 # make_constant(bnode, 0);
zero: OP_ISLIST(t_expr)         # 0 # make_constant(bnode, 0);

zero: OP_ISFUN(const)           # 0 # make_constant(bnode, 0);

zero: OP_ISNUM(fun)             # 0 # make_constant(bnode, 0);
zero: OP_ISNUM(u_list)          # 0 # make_constant(bnode, 0);
zero: OP_ISNUM(t_list)          # 0 # make_constant(bnode, 0);



t_word: t_expr                  # 9 #
t_word: t_list                  # 9 #
t_word: const                   # 9 # bnode->constant = 1;
t_word: var                     # 9 #


t_word: OP_HEAD(var)            # 0 # gen_head(bnode, TAGGED);
t_word: OP_HEAD(u_list)         # 0 # gen_head(bnode, UNTAGGED);
t_word: OP_HEAD(t_word)         # 0 # gen_head(bnode, TAGGED);
t_word: OP_HEAD(t_expr)         # 0 # raise_signal();

t_word: OP_TAIL(var)            # 0 # gen_tail(bnode, TAGGED);
t_word: OP_TAIL(u_list)         # 0 # gen_tail(bnode, UNTAGGED);
t_word: OP_TAIL(t_word)         # 0 # gen_tail(bnode, TAGGED);
t_word: OP_TAIL(t_expr)         # 0 # raise_signal();


t_list: u_list                  # 3 # tag_list_inplace(bnode->reg);
u_list: t_list                  # 3 # untag_list_inplace(bnode->reg);

u_list: OP_LIST(t_expr, t_expr) # 0 # gen_list(bnode);
u_list: OP_LIST(var, t_expr)    # 0 # gen_list(bnode);
u_list: OP_LIST(t_expr, var)    # 0 # gen_list(bnode);
u_list: OP_LIST(var, var)       # 0 # gen_list(bnode);

u_list: OP_LIST(t_expr, t_list) # 0 # gen_list(bnode);
u_list: OP_LIST(t_list, t_expr) # 0 # gen_list(bnode);
u_list: OP_LIST(var, t_list)    # 0 # gen_list(bnode);
u_list: OP_LIST(t_list, var)    # 0 # gen_list(bnode);

if: OP_IF(var)                  # 2 # gen_if(bnode);
if: OP_IF(t_expr)               # 2 # gen_if(bnode);
if: OP_IF(u_expr)               # 2 # gen_if(bnode);
if: OP_IF(u_list)               # 2 # gen_if(bnode);
if: OP_IF(t_list)               # 2 # gen_if(bnode);
if: OP_IF(t_word)                # 1 # gen_if(bnode);

ifthen: OP_IF_THEN(if, t_word) # 2 # gen_ifthen(bnode);

t_word: OP_IF_THEN_ELSE(ifthen, t_word) # 2 # gen_ifthenelse(bnode);


%%

