%{
#include "stdio.h"
#include "assert.h"
#include "tree.h"
#include "codegen.h"
%}

%start ret
%term OP_VAR=1 OP_NUM=2 OP_ADD=3 OP_SUB=4 OP_MUL=5 OP_AND=6 OP_LT=7 OP_EQ=8 OP_NOT=9 OP_HEAD=10 OP_TAIL=11 OP_ISNUM=12 OP_ISLIST=13 OP_ISFUN=14 OP_RET=15
%%

ret: u_expr                 # 0 # gen_code("todo");
ret: OP_RET(expr)           # 0 # gen_code("foobar");
ret: OP_RET(const)          # 0 # ret(LEFT_CHILD(bnode), UNTAGGED, TYPE_NUMBER);
ret: OP_RET(OP_VAR)         # 0 # move(LEFT_CHILD(bnode)->var_reg, "rax"); gen_code("ret");
ret: OP_RET(t_expr)         # 0 # ret(LEFT_CHILD(bnode), TAGGED, 0);

expr: OP_ADD(const, expr)    # 0 # gen_code("addq $%ld, %%%s", LEFT_CHILD(bnode)->value, RIGHT_CHILD(bnode)->reg);
expr: OP_ADD(expr, const)    # 0 # gen_code("addq $%ld, %%%s", RIGHT_CHILD(bnode)->value, LEFT_CHILD(bnode)->reg);
expr: OP_ADD(expr, expr)      # 0 # gen_code("addq %%%s, %%%s", RIGHT_CHILD(bnode)->reg, LEFT_CHILD(bnode)->reg);

expr: OP_NOT(expr)          # 0 # gen_not(LEFT_CHILD(bnode)->reg, bnode->reg, -1);

expr: OP_MUL(expr, const)    # 0 # gen_code("mulq $%ld, %%%s", RIGHT_CHILD(bnode)->value, LEFT_CHILD(bnode)->reg);
expr: OP_MUL(const, expr)    # 0 # gen_code("mulq $%ld, %%%s", LEFT_CHILD(bnode)->value, RIGHT_CHILD(bnode)->reg);
expr: OP_MUL(expr, expr)    # 0 # gen_code("mulq %%%s, %%%s", LEFT_CHILD(bnode)->reg, RIGHT_CHILD(bnode)->reg);

expr: num

u_expr: const               # 0 #

t_expr: OP_VAR              # 0 # move(bnode->var_reg, bnode->reg);
t_expr: OP_NOT(t_expr)      # 0 # gen_not(LEFT_CHILD(bnode)->reg, bnode->reg, TAGGED);


num: OP_VAR                 # 0 # load_num(bnode->var_reg, bnode->reg);

const: OP_ADD(const, const) # 0 # bnode->value = LEFT_CHILD(bnode)->value + RIGHT_CHILD(bnode)->value;
const: OP_SUB(const, const) # 0 # bnode->value = LEFT_CHILD(bnode)->value - RIGHT_CHILD(bnode)->value;
const: OP_MUL(const, const) # 0 # bnode->value = LEFT_CHILD(bnode)->value * RIGHT_CHILD(bnode)->value;
const: OP_AND(const, const) # 0 # bnode->value = LEFT_CHILD(bnode)->value & RIGHT_CHILD(bnode)->value;
const: OP_LT(const, const)  # 0 # bnode->value = LEFT_CHILD(bnode)->value < RIGHT_CHILD(bnode)->value ? 1 : 0;
const: OP_EQ(const, const)  # 0 # bnode->value = LEFT_CHILD(bnode)->value == RIGHT_CHILD(bnode)->value ? 1 : 0;
const: OP_NOT(const)        # 0 # bnode->value = LEFT_CHILD(bnode)->value ^ 1;
const: OP_ISNUM(const)      # 0 # bnode->value = 1;
const: OP_NUM               # 0 # 


%%

